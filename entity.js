"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.entity = exports.createBond = exports.Bond = exports.remove = exports.update = exports.insert = exports.select = exports.reactTo = exports.initFields = exports.fields = exports.field = exports.ftype = exports.fieldTypes = exports.bind = exports.$ = void 0;
const orray_1 = require("orray");
const isA = (value) => Array.isArray(value);
const isS = (value) => typeof value === 'string';
exports.$ = {
    limit: 50,
    id: () => "id"
};
function bind(ent, bond) {
    if (ent.listeners.includes(bond))
        console.warn("already binded");
    else
        ent.listeners.push(bond);
    return ent;
}
exports.bind = bind;
;
exports.fieldTypes = {};
const ftype = ({ tp }) => exports.fieldTypes[tp];
exports.ftype = ftype;
function field(ent, key) {
    let r = ent.fields.find(isS(key) ? (f) => f.key == key : key);
    return r;
}
exports.field = field;
function fields(ent, filter) {
    let field = filter ? ent.fields.filter(filter) : ent.fields;
    return field;
}
exports.fields = fields;
async function initFields(fields, tp) {
    for (let field of fields)
        await exports.fieldTypes[field.tp].init?.(field, tp);
    return fields;
}
exports.initFields = initFields;
function reactTo(ent, target) {
    (target.react ||= []).push(ent.key);
    return ent;
}
exports.reactTo = reactTo;
function select(ent, bond = {}) {
    if (!ent.get)
        console.error("this entity has not insert support");
    return exports.$.select(isS(ent) ? ent : ent.key, bond);
}
exports.select = select;
async function insert(ent, values) {
    if (!ent.post)
        console.error("this entity has not insert support");
    let result = await exports.$.insert(ent.key, values);
    await reload(ent);
    return result;
}
exports.insert = insert;
async function update(ent, values) {
    if (!ent.put)
        console.error("this entity has not update support");
    let result = await exports.$.update(ent.key, values);
    await reload(ent);
    return result;
}
exports.update = update;
async function remove(ent, ids) {
    if (!ent.delete)
        console.error("this entity has not delete support");
    let result = await exports.$.remove(ent.key, { id: ids });
    await reload(ent);
    return result;
}
exports.remove = remove;
function reload(ent, reloaded = []) {
    let l = ent.listeners.length, t1 = Array(l);
    for (let i = 0; i < l; i++)
        t1[i] = ent.listeners[i].select();
    reloaded.push(ent.key);
    ent.react?.forEach(async (key) => {
        if (!(key in entities))
            return;
        if (!reloaded.includes(key))
            reload(await entities[key], reloaded);
    });
    return Promise.all(t1);
}
const delay = 500;
class Bond {
    _query;
    _pag;
    _limit;
    _callindex;
    list;
    readOnly;
    length;
    fromStorage;
    toStorage;
    target;
    all;
    groupBy;
    sort;
    queryBy;
    fields;
    tags;
    where;
    constructor(e, opts = {}) {
        this.target = e;
        this.readOnly = opts.readOnly;
        this._limit = opts.limit == null ? exports.$.limit : opts.limit;
        this._pag = opts.pag || 1;
        let onupd = () => {
            this._pag = 1;
            this.select(delay);
        };
        this.groupBy = (0, orray_1.orray)(opts.groupBy);
        this.query = opts.query;
        this.sort = (0, orray_1.orray)(opts.sort, {
            parse: (e) => isS(e) ? { f: e } : e,
            key: 'f'
        }).onupdate(onupd);
        this.fields = (0, orray_1.orray)(opts.fields).onupdate(() => this.select(delay));
        this.tags = (0, orray_1.orray)(opts.tags).onupdate(onupd);
        this.queryBy = (0, orray_1.orray)(opts.queryBy || fields(e, f => f.query).map(f => f.key)).onupdate(onupd);
        this.where = isS(opts.where) ? [opts.where] : opts.where;
    }
    get key() { return this.target.key; }
    get tp() { return "full"; }
    get pags() {
        return this.limit ? Math.ceil(this.length / this.limit) : 1;
    }
    get query() {
        return this._query;
    }
    set query(value) {
        if (value != this._query) {
            this._pag = 1;
            this._query = value;
            this.select(delay);
        }
    }
    get pag() {
        return this._pag;
    }
    set pag(value) {
        if (value < 1)
            value = 1;
        else if (value > this.pags)
            value = this.pags;
        if (this._pag == value)
            return;
        this._pag = value;
        this.select();
    }
    get limit() {
        return this._limit;
    }
    set limit(value) {
        if (this._limit == value)
            return;
        this._pag = value ?
            Math.ceil(this._limit * this._pag / value) :
            1;
        this._limit = value;
        this.select();
    }
    ids() {
        if (this.pags > 1) {
            let t = this.toJSON();
            return exports.$.select(this.target.key, {
                tp: "col",
                fields: [exports.$.id(this.target)],
                where: t.where,
                query: t.query,
                queryBy: t.queryBy,
                groupBy: t.groupBy
            });
        }
        else
            return this.list.map(f => f.id);
    }
    pushFilter(value) {
        if (isA(this.where))
            this.where.push(value);
        else
            this.addFilter(Array
                .from({ length: 4 })
                .map(() => Math.round(Math.random() * 15).toString(16))
                .join(''), value);
        return this;
    }
    getFilter(key) {
        return isA(this.where) ? null : this.where?.[key] || null;
    }
    removeFilter(key) {
        let w = this.where;
        if (w && !isA(w))
            delete w[key];
        return this;
    }
    addFilter(key, value) {
        let w = this.where ||= {};
        if (isA(w)) {
            for (var r = {}, i = 0; i < w.length; i++)
                r[i] = w[i];
            w = r;
        }
        this.getFilter(key);
        w[key] = value;
        this.select(delay);
        return this;
    }
    whereV() {
        let w = this.where;
        return w ? isA(w) ? w.slice() : Object.values(w) : [];
    }
    bind(list) {
        if (!this.list) {
            (this.list = list || (0, orray_1.orray)()).key = 'id';
            bind(this.target, this);
            this.select();
        }
        return this.list;
    }
    _handlers;
    async getAll() {
        return await exports.$.select(this.target.key, Object.assign(this.toJSON(), {
            tp: undefined,
            limit: undefined,
            pag: undefined,
            total: undefined
        }));
    }
    select(wait) {
        let fn = async () => {
            let tags = {}, groups = {}, list = this.list;
            if (list) {
                let data = await exports.$.select(this.target.key, this);
                this.length = data.t;
                for (let key in list.tags)
                    if (list.tags[key])
                        tags[key] = list.tags[key].value.id;
                for (let key in list.g)
                    groups[key] = list.g[key].keyField();
                list.set(data.d);
                for (let key in tags)
                    (0, orray_1.setTag)(list, key, tags[key]);
                for (let key in groups) {
                    let group = groups[key];
                    list.g[key].set(list.filter(i => group.indexOf(i.id) != -1));
                }
                if (this._handlers)
                    for (let h of this._handlers)
                        h(data);
                return data;
            }
        };
        clearTimeout(this._callindex);
        if (wait) {
            this._callindex = setTimeout(fn, wait);
            return this;
        }
        else
            return fn();
    }
    on(handler) {
        this._handlers || (this._handlers = []).push(handler);
        return this;
    }
    toJSON() {
        let { query: q, queryBy: b, fields: f, where: w, sort: s, target: t } = this;
        return {
            tp: "full",
            fields: !f.length || t.fields.length == f.length ? undefined : f,
            where: w && (isA(w) ? w : Object.values(w)),
            limit: this.limit,
            pag: this.pag,
            query: q && b ? q : undefined,
            queryBy: q && b ? b : undefined,
            sort: s.length ? s : undefined,
        };
    }
}
exports.Bond = Bond;
const createBond = async (src) => new Bond(await entity(src), isS(src) ? void 0 : src);
exports.createBond = createBond;
const entities = {};
function entity(key, f, i) {
    isS(key) || (key = key.key);
    if (f) {
        (key in entities) && console.error("alread inserted");
        isA(f) ?
            (i ||= { get: true, post: true }).fields = f :
            i = f;
        i.listeners ||= [];
        i.key = key;
        return entities[key] = i;
    }
    if (key in entities)
        return entities[key];
    return (entities[key] = Promise.resolve(exports.$.create ? exports.$.create(key, i) : i)).then(v => entities[key] = v);
}
exports.entity = entity;
//# sourceMappingURL=data:application/json;base64,