"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.entity = exports.createBond = exports.Bond = exports.remove = exports.update = exports.insert = exports.select = exports.reactTo = exports.initFields = exports.fields = exports.field = exports.ftype = exports.fieldTypes = exports.unbind = exports.bind = exports.$ = void 0;
const orray_1 = require("orray");
const isA = (value) => Array.isArray(value);
const isS = (value) => typeof value === 'string';
exports.$ = {
    limit: 50,
    id: () => "id"
};
function bind(ent, bond) {
    if ((ent.bonds ||= []).includes(bond))
        console.warn("already binded");
    else
        ent.bonds.push(bond);
    return ent;
}
exports.bind = bind;
;
function unbind(ent, bond) {
    if (ent.bonds) {
        let i = ent.bonds.indexOf(bond);
        (i != -1) && ent.bonds.splice(i, 1);
    }
}
exports.unbind = unbind;
exports.fieldTypes = {};
const ftype = ({ tp }) => exports.fieldTypes[tp];
exports.ftype = ftype;
function field(ent, key) {
    let r = ent.fields.find(isS(key) ? (f) => f.key == key : key);
    return r;
}
exports.field = field;
function fields(ent, filter) {
    let field = filter ? ent.fields.filter(filter) : ent.fields;
    return field;
}
exports.fields = fields;
async function initFields(fields, tp) {
    for (let field of fields)
        await exports.fieldTypes[field.tp].init?.(field, tp);
    return fields;
}
exports.initFields = initFields;
function reactTo(ent, target) {
    (target.react ||= []).push(ent.key);
    return ent;
}
exports.reactTo = reactTo;
const key = (ent) => isS(ent) ? ent : ent.key;
function select(ent, bond = {}) {
    return exports.$.select(key(ent), bond);
}
exports.select = select;
async function insert(ent, values) {
    let k = key(ent), result = await exports.$.insert(k, values);
    reload(k);
    return result;
}
exports.insert = insert;
async function update(ent, values) {
    let k = key(ent), result = await exports.$.update(k, values);
    reload(k);
    return result;
}
exports.update = update;
async function remove(ent, ids) {
    let k = key(ent), result = await exports.$.remove(k, { id: ids });
    reload(k);
    return result;
}
exports.remove = remove;
async function reload(ent, reloaded = []) {
    let t = await entities[ent];
    if (t) {
        let l = t.bonds.length, t1 = Array(l);
        for (let i = 0; i < l; i++)
            t1[i] = t.bonds[i].select();
        reloaded.push(ent);
        if (t.react)
            for (let key of t.react)
                !reloaded.includes(key) && reload(key, reloaded);
    }
}
const delay = 500;
class Bond {
    _q;
    _pag;
    _limit;
    _callindex;
    list;
    readOnly;
    length;
    fromStorage;
    toStorage;
    target;
    all;
    groupBy;
    sort;
    queryBy;
    fields;
    tags;
    where;
    constructor(e, opts = {}) {
        this.target = e;
        this.readOnly = opts.readOnly;
        this._limit = opts.limit == null ? exports.$.limit : opts.limit;
        this._pag = opts.pag || 1;
        let onupd = () => {
            this._pag = 1;
            this.select(delay);
        };
        this.groupBy = (0, orray_1.orray)(opts.groupBy);
        this.query = opts.query;
        this.sort = (0, orray_1.orray)(opts.sort, {
            parse: (e) => isS(e) ? { f: e } : e,
            key: 'f'
        }).onupdate(onupd);
        this.fields = (0, orray_1.orray)(opts.fields).onupdate(() => this.select(delay));
        this.tags = (0, orray_1.orray)(opts.tags).onupdate(onupd);
        this.queryBy = (0, orray_1.orray)(opts.queryBy || fields(e, f => f.query).map(f => f.key)).onupdate(onupd);
        this.where = isS(opts.where) ? [opts.where] : opts.where;
    }
    get key() { return this.target.key; }
    get tp() { return "full"; }
    get pags() {
        return this.limit ? Math.ceil(this.length / this.limit) : 1;
    }
    get query() {
        return this._q;
    }
    set query(value) {
        if (value != this._q) {
            this._pag = 1;
            this._q = value;
            this.select(delay);
        }
    }
    get pag() {
        return this._pag;
    }
    set pag(value) {
        if (value < 1)
            value = 1;
        else if (value > this.pags)
            value = this.pags;
        if (this._pag == value)
            return;
        this._pag = value;
        this.select();
    }
    get limit() {
        return this._limit;
    }
    set limit(value) {
        if (this._limit == value)
            return;
        this._pag = value ?
            Math.ceil(this._limit * this._pag / value) :
            1;
        this._limit = value;
        this.select();
    }
    ids() {
        if (this.pags > 1) {
            let t = this.toJSON();
            return exports.$.select(this.target.key, {
                tp: "col",
                fields: [exports.$.id(this.target)],
                where: t.where,
                query: t.query,
                queryBy: t.queryBy,
                groupBy: t.groupBy
            });
        }
        else
            return this.list.map(f => f.id);
    }
    pushFilter(value) {
        if (isA(this.where))
            this.where.push(value);
        else
            this.addFilter(Array
                .from({ length: 4 })
                .map(() => Math.round(Math.random() * 15).toString(16))
                .join(''), value);
        return this;
    }
    getFilter(key) {
        return isA(this.where) ? null : this.where?.[key] || null;
    }
    removeFilter(filter) {
        let w = this.where;
        if (w)
            if (isA(w)) {
                let i = w.indexOf(filter);
                (i != -1) && w.splice(i, 1);
            }
            else
                delete w[filter];
        this.select(delay);
        return this;
    }
    addFilter(key, value) {
        let w = this.where ||= {};
        if (isA(w)) {
            for (var r = {}, i = 0; i < w.length; i++)
                r[i] = w[i];
            w = r;
        }
        if (w[key] == value)
            return;
        w[key] = value;
        this.select(delay);
        return this;
    }
    whereV() {
        let w = this.where;
        return w ? isA(w) ? w.slice() : Object.values(w) : [];
    }
    bind(list) {
        if (!this.list) {
            (this.list = list || (0, orray_1.orray)()).key = 'id';
            bind(this.target, this);
            this.select();
        }
        return this.list;
    }
    _handlers;
    async getAll() {
        return await exports.$.select(this.target.key, Object.assign(this.toJSON(), {
            tp: undefined,
            limit: undefined,
            pag: undefined,
            total: undefined
        }));
    }
    select(wait) {
        let fn = async () => {
            let tags = {}, groups = {}, list = this.list;
            if (list) {
                let data = await exports.$.select(this.target.key, this);
                this.length = data.t;
                for (let key in list.tags)
                    if (list.tags[key])
                        tags[key] = list.tags[key].value.id;
                for (let key in list.g)
                    groups[key] = list.g[key].keyField();
                list.set(data.d);
                for (let key in tags)
                    (0, orray_1.setTag)(list, key, tags[key]);
                for (let key in groups) {
                    let group = groups[key];
                    list.g[key].set(list.filter(i => group.indexOf(i.id) != -1));
                }
                if (this._handlers)
                    for (let h of this._handlers)
                        h(data);
                return data;
            }
        };
        clearTimeout(this._callindex);
        if (wait) {
            this._callindex = setTimeout(fn, wait);
            return this;
        }
        else
            return fn();
    }
    on(handler) {
        this._handlers || (this._handlers = []).push(handler);
        return this;
    }
    toJSON() {
        let { query: q, queryBy: b, fields: f, where: w, sort: s, target: t } = this;
        return {
            tp: "full",
            fields: !f.length || t.fields.length == f.length ? undefined : f,
            where: w && (isA(w) ? w : Object.values(w)),
            limit: this.limit,
            pag: this.pag,
            query: q && b ? q : undefined,
            queryBy: q && b ? b : undefined,
            sort: s.length ? s : undefined,
        };
    }
}
exports.Bond = Bond;
const createBond = async (src) => new Bond(await entity(src), isS(src) ? void 0 : src);
exports.createBond = createBond;
const entities = {};
function entity(key, f, i) {
    isS(key) || (key = key.key);
    if (f) {
        (key in entities) && console.error("alread inserted");
        isA(f) ?
            (i ||= {}).fields = f :
            i = f;
        i.key = key;
        return entities[key] = i;
    }
    if (key in entities)
        return entities[key];
    return (entities[key] = Promise.resolve(exports.$.create ? exports.$.create(key, i) : i)).then(v => entities[v.key = key] = v);
}
exports.entity = entity;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZW50aXR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLGlDQUFzQztBQUN0QyxNQUFNLEdBQUcsR0FBRyxDQUFDLEtBQVUsRUFBdUIsRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDdEUsTUFBTSxHQUFHLEdBQUcsQ0FBQyxLQUFVLEVBQW1CLEVBQUUsQ0FBQyxPQUFPLEtBQUssS0FBSyxRQUFRLENBQUM7QUF1RTFELFFBQUEsQ0FBQyxHQUFvQjtJQUNoQyxLQUFLLEVBQUUsRUFBRTtJQUNULEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJO0NBQ2YsQ0FBQztBQUNGLFNBQWdCLElBQUksQ0FBQyxHQUFXLEVBQUUsSUFBVTtJQUMxQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssS0FBSyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDO1FBQ25DLE9BQU8sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQzs7UUFFL0IsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdkIsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDO0FBTkQsb0JBTUM7QUFBQSxDQUFDO0FBQ0YsU0FBZ0IsTUFBTSxDQUFDLEdBQVcsRUFBRSxJQUFVO0lBQzVDLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRTtRQUNiLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2hDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQ3JDO0FBQ0gsQ0FBQztBQUxELHdCQUtDO0FBRVksUUFBQSxVQUFVLEdBQW1CLEVBQUUsQ0FBQztBQUN0QyxN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